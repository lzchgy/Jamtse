;; Jamtse is a Tibetan language inputting scheme designed with comfort and keystroke efficiency in mind.
;; Designed by Lobzang Chosgyan (github.com/lzchgy/jamtse)
;; CC 2.0


(input-method bo Jamtse)

(description "
")

(title "ཀ")
(map
 (map
  ("!" "༑")
  ("@" "༄")
  ("#" "༄༅")
  ("$" "ཱྀ")
  ("^" "྾")
  ("&" "༼")
  ("*" "༽")
  ("_" " ")
  ("+" "ཾ")
  ("|" "༈")

  ("`" "༌")
  ("1" "༡")
  ("2" "༢")
  ("3" "༣")
  ("4" "༤")
  ("5" "༥")
  ("6" "༦")
  ("7" "༧")
  ("8" "༨")
  ("9" "༩")
  ("0" "༠")
  ("-" "ྀ")
  ("=" "ྃ")
  ("\\" "༔")
  
  ("|" (cond ((= @-1 0x0F84) (delete @-1) "ྜྷ") (1 "ཌྷ")))

  
  ("q" (cond ((= @-1 0x0F84) (delete @-1) "ཥ") (1 "ཤ")))
  ("Q" (cond ((= @-1 0x0F84) (delete @-1) "ྵ") (1 "ྴ")))
  ("w" (cond ((= @-1 0x0F84) (delete @-1) "ཝ") (1 "ཞ")))
  ("W" (cond ((= @-1 0x0F84) (delete @-1) "ྺ") (1 "ྮ")))
  ("e" "ེ")
  ("E" "ཻ")
  ("r" (cond ((= @-1 0x0F84) (delete @-1) "ྼ") (1 "ར")))
  ("R" "ྲ")
  ("t" (cond ((= @-1 0x0F84) (delete @-1) "ཊ") (1 "ཏ")))
  ("T" (cond ((= @-1 0x0F84) (delete @-1) "ྚ") (1 "ྟ")))
  ("y" (cond ((= @-1 0x0F84) (delete @-1) "ྻ") (1 "ཡ")))
  ("Y" "ྱ")
  ("u" "ུ")
  ("U" "ཱུ")
  ("i" "ི")
  ("I" "ཱི")
  ("o" "ོ")
  ("O" "ཽ")
  ("p" (cond ((= @-1 0x0F84) (delete @-1) "") (1 "པ")))
  ("P" (cond ((= @-1 0x0F84) (delete @-1) "ྥ") (1 "ྤ")))
  ("{" "ྸ")
  ("}" "༃")
  ("[" (cond ((= @-1 0x0F84) (delete @-1) "༂") (1 "ཨ")))
  ("]" "༁")

  ("a" (cond ((= @-1 0x0F84) (delete @-1) "ཋ") (1 "ཐ")))
  ("A" (cond ((= @-1 0x0F84) (delete @-1) "ྛ") (1 "ྠ")))
  ("s" (cond ((= @-1 0x0F84) (delete @-1) "ཤ") (1 "ས")))
  ("S" (cond ((= @-1 0x0F84) (delete @-1) "ྴ") (1 "ྶ")))
  ("d" (cond ((= @-1 0x0F84) (delete @-1) "ཌ") (1 "ད")))
  ("D" (cond ((= @-1 0x0F84) (delete @-1) "ྜ") (1 "ྡ")))
  ("f" (cond ((= @-1 0x0F84) (delete @-1) "དྷ") (1 "ཕ")))
  ("F" (cond ((= @-1 0x0F84) (delete @-1) "ྡྷ") (1 "ྥ")))
  ("g" (cond ((= @-1 0x0F84) (delete @-1) "གྷ") (1 "ག")))
  ("G" (cond ((= @-1 0x0F84) (delete @-1) "ྒྷ") (1 "ྒ")))
  ("h" (cond ((= @-1 0x0F84) (delete @-1) "ྷ") (1 "ཧ")))
  ("H" (cond ((= @-1 0x0F84) (delete @-1) "྅") (1 "ྷ")))
  ("j" (cond ((= @-1 0x0F84) (delete @-1) "ཛ") (1 "ཇ")))
  ("J" (cond ((= @-1 0x0F84) (delete @-1) "ྫ") (1 "ྗ")))
  ("k" (cond ((= @-1 0x0F84) (delete @-1) "ཀྵ") (1 "ཀ")))
  ("K" (cond ((= @-1 0x0F84) (delete @-1) "ྐྵ") (1 "ྐ")))
  ("l" (cond ((= @-1 0x0F84) (delete @-1) "ླ") (1 "ལ")))
  ("L" (cond ((= @-1 0x0F84) (delete @-1) "ཬ") (1 "ླ")))
  (";" (cond ((= @-1 0x0F84) (delete @-1) "ཿ") (1 "ཁ")))
  (":" (cond ((= @-1 0x0F84) (delete @-1) "ྊ") (1 "ྑ")))
  ("'" (cond ((= @-1 0x0F84) (delete @-1) "ཱ") (1 "འ")))
  ("\"" "ྰ")

  ("z" (cond ((= @-1 0x0F84) (delete @-1) "ཛྷ") (1 "ཟ")))
  ("z" (cond ((= @-1 0x0F84) (delete @-1) "ྫྷ") (1 "ྯ")))
  ("x" (cond ((= @-1 0x0F84) (delete @-1) "ཚ") (1 "ཆ")))
  ("X" (cond ((= @-1 0x0F84) (delete @-1) "ྪ") (1 "ྖ")))
  ("c" (cond ((= @-1 0x0F84) (delete @-1) "ཙ") (1 "ཅ")))
  ("C" (cond ((= @-1 0x0F84) (delete @-1) "ྩ") (1 "ྕ")))
  ("v" "྄")
  ("V" "ྭ")
  ("b" (cond ((= @-1 0x0F84) (delete @-1) "བྷ") (1 "བ")))
  ("B" (cond ((= @-1 0x0F84) (delete @-1) "ྦྷ") (1 "ྦ")))
  ("n" (cond ((= @-1 0x0F84) (delete @-1) "ཎ") (1 "ན")))
  ("N" (cond ((= @-1 0x0F84) (delete @-1) "ྞ") (1 "ྣ")))
  ("m" (cond ((= @-1 0x0F84) (delete @-1) "ྉ") (1 "མ")))
  ("M" (cond ((= @-1 0x0F84) (delete @-1) "ྎ") (1 "ྨ")))
  ("," (cond ((= @-1 0x0F84) (delete @-1) "ྈ") (1 "ང")))
  ("<" (cond ((= @-1 0x0F84) (delete @-1) "ྍ") (1 "ྔ")))
  ("." (cond ((= @-1 0x0F84) (delete @-1) "ྌ") (1 "ཉ")))
  (">" (cond ((= @-1 0x0F84) (delete @-1) "ྏ") (1 "ྙ")))
  ("?" (cond ((= @-1 0x0F84) (delete @-1) "ཫ") (1 "ྋ")))

  ("/"
   (cond ((| (= @-1 0x0F44) (= @-1 0x0F94)) "་"))
   "།")
  (" "
   (cond ((& (| (= @-2 0x0F42) (= @-2 0x0F92)) (= @-1 0x0F0B)) (delete @-1))
	 (1 "་")))
  ))

(state
 (init
  (map)))

;; Local Variables:
;; coding: utf-8
;; mode: emacs-lisp
;; End:
